
package ge.ufc.webservices.client;

import java.util.List;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Action;
import jakarta.xml.ws.FaultAction;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 4.0.0-M4
 * Generated source version: 3.0
 * 
 */
@WebService(name = "PersonServiceI", targetNamespace = "http://ws.webapps.ufc.ge/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PersonServiceI {


    /**
     * 
     * @param person
     * @return
     *     returns boolean
     * @throws PersonAlreadyExistsException_Exception
     */
    @WebMethod(operationName = "AddPerson")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "AddPerson", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.AddPerson")
    @ResponseWrapper(localName = "AddPersonResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.AddPersonResponse")
    @Action(input = "http://ws.webapps.ufc.ge/PersonServiceI/AddPersonRequest", output = "http://ws.webapps.ufc.ge/PersonServiceI/AddPersonResponse", fault = {
        @FaultAction(className = PersonAlreadyExistsException_Exception.class, value = "http://ws.webapps.ufc.ge/PersonServiceI/AddPerson/Fault/PersonAlreadyExistsException")
    })
    public boolean addPerson(
        @WebParam(name = "Person", targetNamespace = "")
        Person person)
        throws PersonAlreadyExistsException_Exception
    ;

    /**
     * 
     * @param person
     * @return
     *     returns boolean
     * @throws PersonNotFoundException_Exception
     */
    @WebMethod(operationName = "UpdatePerson")
    @WebResult(name = "UpdatePersonResult", targetNamespace = "")
    @RequestWrapper(localName = "UpdatePerson", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.UpdatePerson")
    @ResponseWrapper(localName = "UpdatePersonResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.UpdatePersonResponse")
    @Action(input = "http://ws.webapps.ufc.ge/PersonServiceI/UpdatePersonRequest", output = "http://ws.webapps.ufc.ge/PersonServiceI/UpdatePersonResponse", fault = {
        @FaultAction(className = PersonNotFoundException_Exception.class, value = "http://ws.webapps.ufc.ge/PersonServiceI/UpdatePerson/Fault/PersonNotFoundException")
    })
    public boolean updatePerson(
        @WebParam(name = "Person", targetNamespace = "")
        Person person)
        throws PersonNotFoundException_Exception
    ;

    /**
     * 
     * @param id
     * @return
     *     returns ge.ufc.webservices.client.Person
     * @throws PersonNotFoundException_Exception
     */
    @WebMethod(operationName = "GetPerson")
    @WebResult(name = "GetPersonResult", targetNamespace = "")
    @RequestWrapper(localName = "GetPerson", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.GetPerson")
    @ResponseWrapper(localName = "GetPersonResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.GetPersonResponse")
    @Action(input = "http://ws.webapps.ufc.ge/PersonServiceI/GetPersonRequest", output = "http://ws.webapps.ufc.ge/PersonServiceI/GetPersonResponse", fault = {
        @FaultAction(className = PersonNotFoundException_Exception.class, value = "http://ws.webapps.ufc.ge/PersonServiceI/GetPerson/Fault/PersonNotFoundException")
    })
    public Person getPerson(
        @WebParam(name = "ID", targetNamespace = "")
        int id)
        throws PersonNotFoundException_Exception
    ;

    /**
     * 
     * @param id
     * @return
     *     returns boolean
     * @throws PersonNotFoundException_Exception
     */
    @WebMethod(operationName = "DeletePerson")
    @WebResult(name = "DeletePersonResult", targetNamespace = "")
    @RequestWrapper(localName = "DeletePerson", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.DeletePerson")
    @ResponseWrapper(localName = "DeletePersonResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.DeletePersonResponse")
    @Action(input = "http://ws.webapps.ufc.ge/PersonServiceI/DeletePersonRequest", output = "http://ws.webapps.ufc.ge/PersonServiceI/DeletePersonResponse", fault = {
        @FaultAction(className = PersonNotFoundException_Exception.class, value = "http://ws.webapps.ufc.ge/PersonServiceI/DeletePerson/Fault/PersonNotFoundException")
    })
    public boolean deletePerson(
        @WebParam(name = "ID", targetNamespace = "")
        int id)
        throws PersonNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<ge.ufc.webservices.client.Person>
     */
    @WebMethod(operationName = "ListPerson")
    @WebResult(name = "ListPerson", targetNamespace = "")
    @RequestWrapper(localName = "ListPerson", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.ListPerson")
    @ResponseWrapper(localName = "ListPersonResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webservices.client.ListPersonResponse")
    @Action(input = "http://ws.webapps.ufc.ge/PersonServiceI/ListPersonRequest", output = "http://ws.webapps.ufc.ge/PersonServiceI/ListPersonResponse")
    public List<Person> listPerson();

}
