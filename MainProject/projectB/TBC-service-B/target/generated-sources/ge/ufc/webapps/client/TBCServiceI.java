
package ge.ufc.webapps.client;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Action;
import jakarta.xml.ws.FaultAction;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.0
 * Generated source version: 3.0
 * 
 */
@WebService(name = "TBCServiceI", targetNamespace = "http://ws.webapps.ufc.ge/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface TBCServiceI {


    /**
     * 
     * @param transactionId
     * @return
     *     returns long
     * @throws AgentAccessDeniedException_Exception
     * @throws AgentAuthFailedException_Exception
     * @throws InternalErrorException_Exception
     * @throws TransactionNotFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "status", targetNamespace = "")
    @RequestWrapper(localName = "status", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webapps.client.Status")
    @ResponseWrapper(localName = "statusResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webapps.client.StatusResponse")
    @Action(input = "http://ws.webapps.ufc.ge/TBCServiceI/statusRequest", output = "http://ws.webapps.ufc.ge/TBCServiceI/statusResponse", fault = {
        @FaultAction(className = InternalErrorException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/status/Fault/InternalErrorException"),
        @FaultAction(className = TransactionNotFoundException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/status/Fault/TransactionNotFoundException"),
        @FaultAction(className = AgentAuthFailedException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/status/Fault/AgentAuthFailedException"),
        @FaultAction(className = AgentAccessDeniedException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/status/Fault/AgentAccessDeniedException")
    })
    public long status(
        @WebParam(name = "transaction_id", targetNamespace = "")
        String transactionId)
        throws AgentAccessDeniedException_Exception, AgentAuthFailedException_Exception, InternalErrorException_Exception, TransactionNotFoundException_Exception
    ;

    /**
     * 
     * @param userID
     * @return
     *     returns java.lang.String
     * @throws AgentAccessDeniedException_Exception
     * @throws AgentAuthFailedException_Exception
     * @throws InternalErrorException_Exception
     * @throws UserNotFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "check", targetNamespace = "")
    @RequestWrapper(localName = "check", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webapps.client.Check")
    @ResponseWrapper(localName = "checkResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webapps.client.CheckResponse")
    @Action(input = "http://ws.webapps.ufc.ge/TBCServiceI/checkRequest", output = "http://ws.webapps.ufc.ge/TBCServiceI/checkResponse", fault = {
        @FaultAction(className = InternalErrorException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/check/Fault/InternalErrorException"),
        @FaultAction(className = UserNotFoundException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/check/Fault/UserNotFoundException"),
        @FaultAction(className = AgentAuthFailedException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/check/Fault/AgentAuthFailedException"),
        @FaultAction(className = AgentAccessDeniedException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/check/Fault/AgentAccessDeniedException")
    })
    public String check(
        @WebParam(name = "userID", targetNamespace = "")
        int userID)
        throws AgentAccessDeniedException_Exception, AgentAuthFailedException_Exception, InternalErrorException_Exception, UserNotFoundException_Exception
    ;

    /**
     * 
     * @param amount
     * @param transactionId
     * @param userId
     * @return
     *     returns long
     * @throws AgentAccessDeniedException_Exception
     * @throws AgentAuthFailedException_Exception
     * @throws AmountNotPositiveException_Exception
     * @throws DuplicateException_Exception
     * @throws InternalErrorException_Exception
     * @throws UserNotFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "pay", targetNamespace = "")
    @RequestWrapper(localName = "pay", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webapps.client.Pay")
    @ResponseWrapper(localName = "payResponse", targetNamespace = "http://ws.webapps.ufc.ge/", className = "ge.ufc.webapps.client.PayResponse")
    @Action(input = "http://ws.webapps.ufc.ge/TBCServiceI/payRequest", output = "http://ws.webapps.ufc.ge/TBCServiceI/payResponse", fault = {
        @FaultAction(className = InternalErrorException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/pay/Fault/InternalErrorException"),
        @FaultAction(className = UserNotFoundException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/pay/Fault/UserNotFoundException"),
        @FaultAction(className = DuplicateException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/pay/Fault/DuplicateException"),
        @FaultAction(className = AmountNotPositiveException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/pay/Fault/AmountNotPositiveException"),
        @FaultAction(className = AgentAuthFailedException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/pay/Fault/AgentAuthFailedException"),
        @FaultAction(className = AgentAccessDeniedException_Exception.class, value = "http://ws.webapps.ufc.ge/TBCServiceI/pay/Fault/AgentAccessDeniedException")
    })
    public long pay(
        @WebParam(name = "transaction_id", targetNamespace = "")
        String transactionId,
        @WebParam(name = "user_id", targetNamespace = "")
        int userId,
        @WebParam(name = "amount", targetNamespace = "")
        double amount)
        throws AgentAccessDeniedException_Exception, AgentAuthFailedException_Exception, AmountNotPositiveException_Exception, DuplicateException_Exception, InternalErrorException_Exception, UserNotFoundException_Exception
    ;

}
